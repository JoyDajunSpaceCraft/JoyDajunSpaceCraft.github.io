<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Joy Blog</title>
    <description>季月侣的Blog || About Joy </description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 09 Sep 2020 21:25:56 +0800</pubDate>
    <lastBuildDate>Wed, 09 Sep 2020 21:25:56 +0800</lastBuildDate>
    <generator>Jekyll v4.1.1</generator>
    
      <item>
        <title> React Native 设备加载 </title>
        <description>&lt;h2 id=&quot;react-native-实现手机端的相机加载&quot;&gt;React Native 实现手机端的相机加载&lt;/h2&gt;

&lt;p&gt;需要了解到 expo 作为一个基础平台提供了很多工具，比如加载数据库，获取手机的权限，打开相机并拍照等功能，所以利用 expo 提供的 API 实现一个能打开相机，保存拍摄的图片，获得当前位置，在地图上展现出当前位置的 App。&lt;/p&gt;

&lt;h2 id=&quot;基础界面&quot;&gt;基础界面&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;分为 4 个界面
    &lt;ul&gt;
      &lt;li&gt;MapScreen &lt;em&gt;地图界面&lt;/em&gt;&lt;/li&gt;
      &lt;li&gt;NewPlaceScreen &lt;em&gt;创建新的图片和位置界面&lt;/em&gt;&lt;/li&gt;
      &lt;li&gt;PlaceDetailScreen &lt;em&gt;位置详细信息界面&lt;/em&gt;&lt;/li&gt;
      &lt;li&gt;PlacesListScreen &lt;em&gt;所有位置的渲染界面&lt;/em&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;react-native-实现设备拍摄照片&quot;&gt;React Native 实现设备拍摄照片&lt;/h2&gt;

&lt;p&gt;用户在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ImagePicker.launchCameraAsync({...})&lt;/code&gt;中获得的图像的URI即存储路径，同样其导入是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;expo install expo-image-picker&lt;/code&gt;可以在官方文档的ImagePicker中找到用法,同样不光需要拍摄，在拍摄前需要获取device的权限，需要用到Permissions API&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;import * as ImagePicker from 'expo-image-picker'; 
import * as Permissions from 'expo-permissions';

const verfiypermissions = async () =&amp;gt; {
        // 这个方法在用户确认后会自动保存在设备上， 用户不需要再次使用
        const result = await Permissions.askAsync(Permissions.CAMERA, Permissions.CAMERA_ROLL)// return 一个Promise
        if (result.status !== 'granted') {
            // 如果没有授权 
            Alert.alert('Insufficient Permissions!',
                'You need to grant camera permissions to use this app.',
                [{ text: 'okey' }]
            );
            return false;
        }
        return true;
    }
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;react-native-实现保存照片到本地device&quot;&gt;React Native 实现保存照片到本地device&lt;/h2&gt;

&lt;h2 id=&quot;react-native-实现-sqlite-数据库连接&quot;&gt;React Native 实现 SQLite 数据库连接&lt;/h2&gt;

&lt;p&gt;首先对数据库的连接是在创建 shopApp 中做的，这里是将 fetch 的网页连接变成实际的数据库，当然调用的是用原生 Sql 语言编写，expo 的 SQLite API 提供了事务性。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;首先定义一个 helpers 包和 App.js 同级，这个是为了更好的调用数据库，其中写入 db.js 文件
在终端中导入包 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;expo install expo-sqlite&lt;/code&gt;可以在官方文档的SQLite中找到用法&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;下面代码定义了创建一个 places 数据库，首先是新建一个 Promise,其中的 SQLite.openDatabase(…) 在官方文档中 Open a database, creating it if it doesn’t exist, and return a Database object,利用 Promise 包裹住这个事务是保证有 error 时可以在 await 中 catch 住。&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;import * as SQLite from 'expo-sqlite';

const db = SQLite.openDatabase('place.db');

export const init = () =&amp;gt; {
    //create basic table
    const promise = new Promise((resolve, reject) =&amp;gt; {
        db.transaction((tx) =&amp;gt; {
            // transaction保证事务性
            tx.executeSql(&quot;CREATE TABLE IF NOT EXISTS places (id INTEGER PRIMARY KEY NOT NULL, title TEXT NOT NULL, imageUri TEXT NOT NULL, address TEXT NOT NULL, lat REAL NOT NULL, lng REAL NOT NULL)&quot;,
                [],
                () =&amp;gt; {
                    // SUCCESS
                    resolve();
                },
                (_, err) =&amp;gt; {//第一个参数是 repeition of query ,第二个才是需要的error信息
                    // error
                    reject(err);
                }
            );
        });
    });
    return promise;
};
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在 store/places-actions.js 中来获得数据库传入的数据
这里的 FileSystem.documentDirectory 又是 expo 提供的 API 需要先导入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;expo install expo-file-system&lt;/code&gt;可以在官方文档的FileSystem中找到用法作用是：provides access to a file system stored locally on the device. Within the Expo client, each app has a separate file system and has no access to the file system of other Expo apps.这里是为了将拍下来的照片存入device。&lt;/p&gt;

    &lt;p&gt;其中addPlace是需要在NewPlaceScreen中载入的图片，其中传入的参数，一个是用户输入的title,一个是存入缓存中的imageUri,一路follow其实传递路线是&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;export const addPlace = (title, image) =&amp;gt; {
    return async dispatch =&amp;gt; {
        // 需要dispatch的方法
        const fileName = image.split('/').pop();
        const newPath = FileSystem.documentDirectory + fileName;
        console.log(newPath)

        try {
            await FileSystem.moveAsync({// 存储位置 从哪里来 到哪里去
                from: image,
                to: newPath
            });
            const dbResult = await insertPlace(
                title,
                newPath,
                'Dummey Address',
                15.6,
                12.3
            );
            console.log(dbResult);
            dispatch({ type: ADD_PLACE, placeData:
            { id: dbResult.insertId,
            title: title,
            image: newPath } });

        } catch (err) {
            console.log(err);
            throw (err);
        }
    }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;react-native-实现手机端获得地址&quot;&gt;React Native 实现手机端获得地址&lt;/h2&gt;

&lt;h2 id=&quot;react-native-百度地图实现静态地图渲染&quot;&gt;React Native 百度地图实现静态地图渲染&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://lbsyun.baidu.com/index.php?title=static&quot; target=&quot;_blank&quot;&gt;百度地图开发者获得静态地图界面&lt;/a&gt;
原始的教程中是 Google Map 获得 API 但是需要绑定 credit card 以及连接 VPN，这里利用百度地图也可以实现类似功能，就是界面有点难找：）&lt;/p&gt;

&lt;h3 id=&quot;react-语法-小知识点&quot;&gt;React 语法 小知识点&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;export default xxx&lt;/code&gt; 在后面导入的时候是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import xxx from ''&lt;/code&gt;， 但是在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;export const xxx&lt;/code&gt; 时 后面导入要求 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import {xxx} from ''&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;ES7中代码编写的特点，不再使用this关键字了
 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;constructor (){this.property = 'xxx'}&lt;/code&gt;转换为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;property = 'xxx&lt;/code&gt;;
 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method () {...}&lt;/code&gt;转换为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method = () =&amp;gt;{...}&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;...&lt;/code&gt; spread  数组&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const newArray = [...oldArray,1,2]&lt;/code&gt;；Object&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const newObj = {... oldObj, newProp:5}&lt;/code&gt; 如果oldObj也有newProp，新的Obj会覆盖newProp。
 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;...&lt;/code&gt; rest 针对方法的填充 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;function sortArg(...args){return args.sort()}&lt;/code&gt;。注意，使用…表示创建了新的对象。&lt;/li&gt;
  &lt;li&gt;destructuring 不创建新对象的抽取 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[a,b] = ['a', 'b']&lt;/code&gt;此时单独拿a或者b都不算创建新的对象，适用于array和obj。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reference&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;primitive&lt;/code&gt;格式，object和array都是reference所以copy之后会联动修改，但是常量不会，因为常量是primitive格式的。解决联动修改的方法是给copy那一方加上&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;...&lt;/code&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; cosnt person = {name:'max'};
 const secondPersion = {...person,name:'min'};
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 06 Sep 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/09/06/React-Native%E5%AE%9E%E7%8E%B0%E7%9B%B8%E6%9C%BA%E6%89%8B%E6%9C%BA%E5%8A%A0%E8%BD%BD/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/09/06/React-Native%E5%AE%9E%E7%8E%B0%E7%9B%B8%E6%9C%BA%E6%89%8B%E6%9C%BA%E5%8A%A0%E8%BD%BD/</guid>
        
        <category>react native</category>
        
        <category>self-learning</category>
        
        <category>permission</category>
        
        
      </item>
    
      <item>
        <title> React Native 建立一个购物App </title>
        <description>&lt;h3 id=&quot;react-native-概述&quot;&gt;React Native 概述&lt;/h3&gt;

&lt;p&gt;是一种适用于手机端的前端编程语言， 适用于IOS和Android，但是在Android的使用中应该是不能很好兼容。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;React Native以下称为RN&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;编程软件 Visual Studio, 需要预先加载的是npm，可以自动帮助渲染，学习资料来源于Udemy上的React Native教程，老师是德国人&lt;em&gt;Maximilian Schwarzmüller&lt;/em&gt;， 讲述很详实，带着学生一点一点搭建一个购物网站。&lt;a href=&quot;http://udemy.com/course/react-native-the-practical-guide&quot; target=&quot;_blank&quot;&gt;udemy&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;简介&quot;&gt;简介&lt;/h3&gt;

&lt;p&gt;首先要了解RN作为一个前端编程语言能够实现的功能。在开始学习前要至少掌握JS最基本的语法，&lt;a href=&quot;https://es6.ruanyifeng.com/?search=AsyncStorage&amp;amp;x=0&amp;amp;y=0#&quot; target=&quot;_blank&quot;&gt;ES6(阮一峰)&lt;/a&gt;，这个链接在遇到未知的语法时可以随时查看。
React 知识也需要知道，能够理解props和state作用即可。&lt;/p&gt;

&lt;h3 id=&quot;实现源码&quot;&gt;实现源码&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/JoyDajunSpaceCraft/react-native-for-a-shop&quot; target=&quot;_blank&quot;&gt;JoyDajunSpaceCraft/react-native-for-a-shop&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;初始化&quot;&gt;初始化&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;expo init &lt;em&gt;你的RN文件名&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;选择template 选择 第一个blank即可&lt;/li&gt;
  &lt;li&gt;进入以刚刚RN文件命名的 dir 执行 npm start&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;作为基本条件，需要安装npm，npm作为web端打包软件可以帮助加载RN中需要包。&lt;/p&gt;

&lt;p&gt;以下就是执行成功&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;- cd rn-device-feature-app
- npm start # you can open iOS, Android, or web from here, or run them directly with the commands below.
- npm run android
- npm run ios
- npm run web
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;网页端自动出现http://localhost:19002/ 界面可以点击里面的 Run on XXX 在电脑端打开模拟界面。如果是手机需要模拟，需要下载expo，而且确保手机和电脑处于一个网络环境下。&lt;/p&gt;

&lt;p&gt;如果想要调试在电脑模拟界面(mac -&amp;gt; ios) &lt;em&gt;cmd + D&lt;/em&gt; 点击 &lt;em&gt;Debug remote JS&lt;/em&gt;，在浏览器中能够实现debug，如果是要界面精美，有data flow的debug，可下载 react native debugger实现精细化debug。当然对我比较适用的是笨办法，打开Termial，console.log。&lt;/p&gt;

&lt;h4 id=&quot;前期准备&quot;&gt;前期准备&lt;/h4&gt;

&lt;p&gt;如果有多页面需求 可以在 &lt;a href=&quot;https://reactnavigation.org/docs/getting-started&quot; target=&quot;_blank&quot;&gt;react-navigation/doc/getstart&lt;/a&gt;中找到加载navigation的包。
 我把需要导入的包都写入App.js开头注释中，在其他页面的开头注释中也会有相应要导入的依赖包。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;导入 redux 请按照以下形式在终端中导入
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; npm install --save redux react-redux redux-thunk
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;利用RN作为前端，redux实现component中相互传递参数，其中用到了useEffect, useState,useCallback等在”react-native”中需要传入的参数。这里用到的代码引入是：
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; import React, {...}  from 'react';
 import {...} from 'react-native';
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;将要用到的数据库 database：firebase 用来获得token等和存储数据。firebase是google开发所以登录时需要能够&lt;strong&gt;VPN&lt;/strong&gt;连接。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;整体结构&quot;&gt;整体结构&lt;/h4&gt;
&lt;p&gt;在已经创建好的基础上显示的结构，我们能够用到的是App.js作为主文件，其他结构需要自己创建。
 需要自己增加的结构如下：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;components           &lt;em&gt;在较大的页面中需要加载的小部分，一个页面中的一小块&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;constants            &lt;em&gt;放置常用的常量，比如整体的颜色设定&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;model                &lt;em&gt;放入定义的数据的格式，例如一件商品的名称、价格、描述和图片链接&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;navigation           &lt;em&gt;页面导航&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;screens              &lt;em&gt;主要页面&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;store                &lt;em&gt;存放reduer和action&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;这里的模块都是本项目所使用的，并不代表一定需要这样创建&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;手动实践&quot;&gt;手动实践&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;界面的加载&lt;/li&gt;
  &lt;li&gt;类似于css的style渲染，在RN中的页面布局不是用CSS，而是用和其类似的StyleSheet 导入方式是&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;import { StyleSheet } from 'react-native';
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;是输入RN原生组件一部分，同样可以导入的有 { View, Text, TextInput, Button,…}遇到详细的可以细说，首先要掌握的是RN中的StyleSheet使用方式。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;import { View, Button, StyleSheet, Image } from 'react-native';

&amp;lt;View style={styles.imagePicker}&amp;gt;
            &amp;lt;View style={styles.imagePreview}&amp;gt;
                &amp;lt;Text&amp;gt;
                    No image pick yet
                &amp;lt;/Text&amp;gt;
                &amp;lt;Image style={styles.image}/&amp;gt;
            &amp;lt;/View&amp;gt;
            &amp;lt;Button
                title=&quot;Take Image&quot;
                color={Colors.primary}
                onPress={takeImageHandler} /&amp;gt;
        &amp;lt;/View&amp;gt;

const styles = StyleSheet.create({
    imagePicker:{

    },
    imagePreview:{
        width:'100%',
        height:200,
        marginBottom:10,
        justifyContent:'center',
        alignItems:'center',
        borderColor:'#ccc',
        borderWidth:1

    },
    image:{
        width:'100%',
        height:'100%'
    }
});

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;其中的布局方式可以看这篇&lt;a href=&quot;https://www.jianshu.com/p/c390042d6140&quot; target=&quot;_blank&quot;&gt;react-native中flexDirection、justifyContent、alignItems的简单使用&lt;/a&gt;
剩下的内容只需要看style逻辑就好。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;需要了解ES6中异步的相关知识，主要会用到的是async 和 await，因为涉及到Promiss中的内容但是我还没有好好看：）但是可以先了解一下异步操作，&lt;a href=&quot;https://www.jianshu.com/p/4e91c4be2843&quot; target=&quot;_blank&quot;&gt;ES6之async和await&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;理清RN中action和reducer的关系，在这个项目中每个页面功能分别对应一个action和reducer，action中存放的是界面中可以调用执行缓存的方法，返回的type标定了从页面上传来的数据是作用于什么场合；之后action会将数据return给reducer，reducer是真正意义上对缓存操作，相对于数据库更为灵活，可以根据从action中传入的type不同对数据进行不同的处理。如果想要拿到缓存中的数据，可以利用useSelector实现，同样需要搭配一些设置。这里是简单了解。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 06 Sep 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/09/06/React-Native-startlearing/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/09/06/React-Native-startlearing/</guid>
        
        <category>react native</category>
        
        <category>self-learning</category>
        
        
      </item>
    
  </channel>
</rss>
